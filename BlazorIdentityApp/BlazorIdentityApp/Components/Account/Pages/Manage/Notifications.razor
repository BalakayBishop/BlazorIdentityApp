@page "/notifications"

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject IPushNotificationsRepository _pushNotificationsRepository
@inject HttpClient _httpClient

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>

<main class="container">
    <section class="subscription-details js-subscription-details is-invisible mb-3">
        <p>
            Once you've subscribed your user, you'd send their subscription to your
            server to store in a database so that when you want to send a message
            you can lookup the subscription and send a message to it.
        </p>
        <p>
            To simplify things for this code lab copy the following details
            into the <a href="https://web-push-codelab.glitch.me/">
                Push Companion
                Site
            </a> and it'll send a push message for you, using the application
            server keys on the site - so make sure they match.
        </p>
        <pre><code class="js-subscription-json"></code></pre>
    </section>

    <button id="btn-notifications" class="btn btn-primary js-push-btn" disabled>Allow Notifications</button>
</main>

@* <script src="notifications.js"></script> *@

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    [JSInvokable]
    public static async Task<string> CreateOrUpdatePushSubscription(string data)
    {
        try
        {
            HttpClient newHttp = new HttpClient();
            newHttp.BaseAddress = new Uri("https://localhost:7299");
            HttpResponseMessage response = await newHttp.PostAsJsonAsync("api/PushNotifications/CreateOrUpdate", data);

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsStringAsync();
            }
            else
            {
                return $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            return $"Exception: {ex.Message}";
        }
    }
}
