@page "/records"

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]

@inject AuthenticationStateProvider _auth
@inject IRecordsRepository _recordsRepository
@inject HttpClient _httpClient

<PageTitle>Records</PageTitle>

<h3>Records</h3>

@if (loading)
{
    <p class="mt-5">Loading...</p>
}
else
{
    <div class="w-50 mt-5 mb-3">
        @* 
        /// <summary>
        /// Represents the form for submitting a new record.
        /// </summary>
        /// <method>POST</method>
        /// <model name="Input">The input model for the record.</model>
        /// <input name="Title" type="text">The title for the record.</input>
        /// <input name="Title" type="text">The description for the record.</input>
        *@
        <EditForm Model="Input" OnSubmit="SubmitRecord" FormName="NewRecordForm" method="POST">
            <label for="title" class="form-label">Title</label>
            <InputText @bind-Value="Input.Title" class="form-control mb-3" placeholder="Title" aria-required="true" required />

            <label for="description" class="form-label">Description</label>
            <InputTextArea @bind-Value="Input.Description" class="form-control mb-3" rows="5" placeholder="Description" aria-required="true" required />

            <button type="submit" class="btn btn-primary">Submit</button>

            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
    </div>

    <div class="w-50">
        <h3>Records</h3>
        <ol class="list-group list-group-numbered">
            @{
                if (records is not null)
                {
                    foreach (RecordsViewModel record in records)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-start">
                            <div class="ms-2 me-auto">
                                <div class="fw-bold">@record.Title</div>
                                @record.Description
                            </div>
                        </li>
                    }
                }
                else if (records is null || records.Count == 0)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-start">
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">@errorMessage</div>
                        </div>
                    </li>
                }
            }
        </ol>
    </div>
}

@code {
    private bool loading = true;
    private InputModel Input = new();
    private List<RecordsViewModel>? records;
    private string? errorMessage = "No records to display";

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    /// <summary>
    /// Executes after the component has been rendered.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render of the component.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadRecordsAsync();
            loading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Loads the records asynchronously.
    /// </summary>
    private async Task LoadRecordsAsync()
    {
        try
        {
            records = await _httpClient.GetFromJsonAsync<List<RecordsViewModel>>("api/records") ?? new List<RecordsViewModel>();
        }
        catch (NullReferenceException n)
        {
            Console.WriteLine(n.Message);
            records = null!;
            errorMessage = "Failed to load records. Please try again later.";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            records = null!;
            errorMessage = "An error occurred while loading records. Please try again later.";
        }
    }

    /// <summary>
    /// Submits a new record.
    /// </summary>
    private async Task SubmitRecord()
    {
        string email = (await _auth.GetAuthenticationStateAsync()).User.Identity.Name;

        RecordsViewModel newRecord = new()
        {
            Title = Input.Title,
            Description = Input.Description,
            UserEmail = email
        };

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("api/records", newRecord);

        if (response.IsSuccessStatusCode)
        {
            records.Add(newRecord);
            Input = new();
            StateHasChanged();

            HttpResponseMessage sendPush = await _httpClient.GetAsync("api/Notification/SendPush");
        }
    }

    /// <summary>
    /// Represents the input model for a record.
    /// </summary>
    private sealed class InputModel
    {
        [Required]
        public string Title { get; set; } = null!;

        [Required]
        public string Description { get; set; } = null!;
    }
}
