@page "/"

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject AuthenticationStateProvider _auth
@inject HttpClient _httpClient
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<AuthorizeView>
    <Authorized>
        <input type="hidden" id="currentUserEmail" data-currentUser="@context.User.Identity?.Name" />
    </Authorized>
</AuthorizeView>

<script src="home.js"></script>

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            CheckFirstValue();
        }
    }

    /// <summary>
    /// Invokes the "checkFirstVisit" JavaScript function to check the firstVisit sessionStorage item.
    /// </summary>
    public async void CheckFirstValue()
    {
        await JS.InvokeVoidAsync("checkFirstVisit");
    }

    /// <summary>
    /// Handles the creation or update of a push subscription.
    /// </summary>
    /// <param name="data">The subscription data in JSON format.</param>
    /// <param name="email">The email address associated with the subscription.</param>
    /// <returns>A task that represents the asynchronous operation. The task result contains a string message indicating the outcome of the operation.</returns>
    [JSInvokable]
    public static async Task<string> hCreateOrUpdatePushSubscription(string data, string email)
    {
        try
        {
            HttpClient newHttp = new HttpClient();
            newHttp.BaseAddress = new Uri("https://localhost:7071");

            NotificationRequestViewModel request = new()
            {
                json = data,
                email = email
            };

            HttpResponseMessage response = await newHttp.PostAsJsonAsync("api/PushNotifications/CreateOrUpdate", request);

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsStringAsync();
            }
            else
            {
                return $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            return $"Exception: {ex.Message}";
        }
    }
}